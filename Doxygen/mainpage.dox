/// \mainpage
///
/// 1. Introduction
/// ------------
///
/// A _comparator network_ consists of a fixed number of _channels_ that carry
/// scalar values from some strongly ordered set (usually integers or floating point
/// numbers), and _comparators_ that connect pairs of channels, swapping the values on
/// the channels if they are not in a desired order. Comparator networks that sort
/// all inputs are called _sorting networks_. See the 
/// [Wikipedia page](https://en.wikipedia.org/wiki/Sorting_network) for more information.
///
/// The source code for this sorting network drawing and verification tool, 
/// written and maintained by
/// [Ian Parberry](https://ianparberry.com), can
/// load comparator networks from a text file or generate any of the three standard
/// sorting networks: odd-even, bitonic, and pairwise.
/// Once loaded a comparator network will be drawn with the channels running
/// horizontally and the comparators running vertically. 
/// For example, \ref fig1 "Fig. 1"
/// shows, from left to right, 
/// a 16-input odd-even, bitonic, and pairwise sorting network.
///
/// \anchor fig1
///
/// \image html triple.svg "Fig. 1: A 16-input odd-even (left), bitonic (center), and pairwise (right) sorting network." width=95% 
/// 
/// The image can be exported as a `PNG` file, an `SVG` file, or a `TeX` file
/// (see \ref export "Section 3.1.3" for more information).
/// The comparators route the
/// smaller of the values on its channels to the upper of the two channels
/// that it is connected to, and the larger of the two values to the  lower. 
/// A comparator network can be be tested to verify that it is a sorting network,
/// that is, whether the outputs of the sorting network are in non-descending order
/// from top to bottom. 
///
/// 2. Code Overview
/// ----------------
///
/// It is assumed that the reader is familiar with the basics
/// of Windows programming such as `WinMain`, the Window procedure, message
/// passing, and drop-down menus.
/// `Main.cpp` contains the mandatory Windows functions `wWinMain()`
/// and a Window procedure `WndProc()`, which use a single global variable
/// `static CMain* g_pMain`. 
/// Most of the other gnarly Windows-specific
/// code, which used the `Win32` API, is hidden away in `WindowsHelpers.cpp`
/// and `WindowsHelpers.cpp`.
/// `Gdi+` is used for the graphics.
/// The main class is `CMain`, which encapsulates the main body of the
/// code in the approved object-oriented fashion. 
///
/// 3. The Controls
/// ---------------
///
/// The menu bar at the top of the application window has four drop-down menus,
/// \ref filemenu "File", 
/// \ref generatemenu "Generate", 
/// \ref viewmenu "View", and 
/// \ref helpmenu "Help".
///
/// ---
/// 
/// \anchor filemenu
/// ### 3.1 The `File` Menu
///
/// \image html FileMenu.png 
///
/// The `File` menu has four options, \ref open "Open", \ref verify "Verify", 
/// \ref export "Export", and  \ref quit "Quit".
///
/// \anchor open
/// #### 3.1.1 `Open`
///
/// Selecting `Open` will pop up a Windows `Open` `File` dialog box that will allow you to
/// choose a text file to load. Be aware that there is minimal error checking and no
/// error reporting, so it is best to load only text files that are in the correct
/// format for a comparator network, which is as follows. An \f$n\f$-input
///  comparator network of
/// depth \f$d\f$ will have \f$d\f$ lines of text, one for each layer of non-overlapping
/// comparators (that is, no two comparators in the same level can have a 
/// channel in common).
/// Each line contains a number of pairs \f$i,j\f$ of channel numbers, one for each
/// comparator on that level, where
/// \f$0 \leq i,j < n\f$. The channel numbers should be separated by spaces.
/// For example, the following three-line text file
///
///      0 1 2 3
///      0 2 1 3
///      1 2
///
/// describes the four-input sorting network below in \ref fig2 "Fig. 2"
/// The channels are numbered 0 through 3 from bottom to top.
///
/// \anchor fig2
///
/// \image html w4d3s5.svg "Fig. 2: A 4-input sorting network." width=80 
///
/// This sorting network can be loaded from `w4d3s5.txt`, which can be found,
/// along with a few other examples, in
/// the folder containing the Visual Studio solution file for this project.
/// 
/// \anchor verify
/// #### 3.1.2 `Verify`
///
/// Selecting `Verify` will test whether the current comparator network is a sorting
/// network, and also tell you its size and depth.
/// This process will take time exponential in the number of inputs, which is
/// probably the best we can do because
/// sorting network verification
/// is Co-NP-complete even for shallow sorting networks (for example,
/// see the following papers).
///
/// > I. Parberry, "Single-exception sorting networks and the computational complexity of 
/// > optimal sorting network verification", _Mathematical Systems Theory_, Vol. 23, No. 1,
/// >  pp. 81–93, 1990.
/// >
/// > I. Parberry, "On the computational complexity of optimal sorting network 
/// > verification", in Parle91, Proceedings of Parallel Architectures
/// > and Languages Europe, pp. 252-269, 1991.
///
/// You will be warned if the number of inputs to the sorting network
/// is 30 or larger via the following dialog box:
///
/// \image html proceed.png width=40%
///
/// Clicking on the `No` button will abort the test. Clicking on the `Yes` button will
/// allow the test to proceed. Be aware that if it takes too long, then 
/// the only way to cancel it 
/// will be to quit the application by clicking several times on the standard red x
/// button at top-right of the window. If the test terminates, then you will see one
/// of the following dialog boxes:
///
/// \image html Verify.png width=90%
///
/// \anchor export
/// #### 3.1.3 `Export`
///
/// \image html ExportMenu.png 
/// 
/// The `Export` sub-menu will pop up a Windows `Save` `File` dialog box that can save
/// an image of the current comparator network in one of three formats.
///
/// 1. `Png` saves the image as a bitmap in `Portable` `Network` `Graphics` format.
///
/// 2. `Svg` saves the image in `Scalable` `Vector` `Graphics` format which
/// can be opened in any web browser. This is superior to `Png` format in that
/// it can be zoomed in or out without pixelation.
///
/// 3. `TeX` saves the image as a \f$\TeX\f$ `picture` environment that can be used
/// as a figure in a \f$\LaTeX\f$ document.
/// For example, if the sorting network `knuth16.txt` is exported as `knuth16.tex`,
/// then the following \f$\LaTeX\f$ code will input it into a manuscript as a figure.
/// ~~~
///    \begin{figure}
///      \centering\input{knuth16.tex}
///      \caption{A 16-input sorting network.}
///    \end{figure}
/// ~~~
///
/// \anchor quit
/// #### 3.1.4 `Quit`
/// 
/// Selecting `Quit` will exit the application.
///
/// ---
///
/// \anchor generatemenu
/// ### 3.2 The `Generate` Menu
///
/// \image html GenerateMenu.png 
///
/// The `Generate` menu has six options, `Bubblesort-min`,
/// `Bubblesort-max`, `Bubblesort`, `Odd-even`, `Bitonic`, and `Pairwise`.
/// All of these will pop up a dialog box asking for the number of inputs.
///
/// \image html inputs.png 
///
/// `Bubblesort-min` generates a sorting network that emulates the classical
/// bubblesort algorithm by bubbling the smallest value to the minimum channel,
/// then the second smallest value to the second minimum channel, etc., placing each
/// sequence of comparators as close as possible to take advantage of parallelism.
/// An \f$n\f$-input `Bubblesort-min` sorting network has depth \f$2n-3\f$ and
/// size (number of comparators) \f$n(n-1)/2\f$.
/// \ref fig3 "Fig. 3" (left) shows an example with 16 inputs.
///
/// `Bubblesort-max` generates a similar sorting network that bubbles maxima
/// instead of minima.
/// It also has depth \f$2n-3\f$ and size \f$n(n-1)/2\f$.
/// \ref fig3 "Fig. 3" (center) shows an example with 16 inputs.
///
/// `Bubblesort` generates a fully parallelized bubblesort.
/// An \f$n\f$-input `Bubblesort` sorting network has depth \f$n\f$ and
/// size \f$n(n-1)/2\f$.
/// \ref fig3 "Fig. 3" (right) shows an example with 16 inputs.
///
/// \anchor fig3
///
/// \image html Bubblesort16.svg "Fig. 3: 16-input bubblesort-min (left), bubblesort-max (center) and bubblesort (right) sorting networks." width=95% 
///
/// `Odd-even` and `Bitonic` generate Batcher's odd-even and bitonic sorting
///  networks, respectively, from
///
/// > K. E. Batcher, "Sorting networks and their applications", In Proc. AFIPS
/// > Spring Joint Computer Conference, Vol. 32, pp. 307–314, 1968.
///
/// \ref fig1 "Fig. 1" (left) shows an odd-even sorting network with 16 inputs.
/// \ref fig1 "Fig. 1" (center) shows a bitonic sorting network with 16 inputs.
///
/// `Pairwise` generates the pairwise sorting network from
///
/// > I. Parberry, "The pairwise sorting network", 
/// > _Parallel Processing Letters_, Vol. 2, No. 2,3, pp. 205-211, 1992.
///
/// \ref fig1 "Fig. 1" (right) shows a pairwise sorting network with 16 inputs.
///
/// Technically, the odd-even, bitonic, and pairwise sorting networks are only
/// defined for a power of 2 inputs.
/// If you specify a number of inputs \f$n\f$ that is not a power of two, 
/// the generator will
/// construct a sorting network with \f$2^{\lceil \log_2 n\rceil}\f$ inputs
/// and remove the unneeded channels and 
/// the comparators on them.
/// If \f$n\f$ is a power of 2, the odd-even and pairwise sorting networks have depth
/// \f$\log_2(n) (\log_2 (n) + 1)/2\f$ and size
/// \f$n\log_2 (n)(\log_2 (n) - 1)/4 + n - 1\f$, and the bitonic sorting network
/// has the same depth and size \f$n \log_2(n)/2\f$.
///
/// ---
/// 
/// \anchor viewmenu
/// ### 3.3 The `View` Menu
///
/// \image html ViewMenu.png 
/// 
/// The `View` menu has three options, `Horizontal`, and `Vertical`.
/// The default is `Horizontal` which displays and exports images in the standard
/// form with horizontal channels and the output in non-decreasing order from
/// bottom to top.
/// Selecting `Vertical` will display and exports image with
/// vertical channels and the output in non-decreasing order from left to right.
/// For example, in \ref fig4 "Fig. 4" shows the 4-input sorting network
/// from \ref fig2 "Fig. 2" drawn in vertical format.
///
/// \anchor fig4
///
/// \image html w4d3s5v.svg "Fig. 3: A 4-input sorting network drawn in vertical format." height=80
///
/// ---
///
/// \anchor helpmenu
/// ### 3.4 The `Help` Menu
///
/// \image html HelpMenu.png 
///
/// The `Help` menu has two entries, `Display help` which opens up this 
/// documentation in a browser,
/// and `About` which displays the `About` dialog box.
///


 